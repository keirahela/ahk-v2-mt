{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#autohotkey-v2-custom-extensions","title":"AutoHotkey v2 \u2013 Custom Extensions","text":"<p>This documentation covers the additional built\u2011in functions added to your AutoHotkey v2 build:</p> <ul> <li>Multithreading (ThreadCreate/Destroy/Count, ThreadSetVar/ThreadGetVar)</li> <li>WebSocket client (Connect/Send/Receive/Disconnect)</li> <li>Simple HttpRequest (GET)</li> </ul> <p>Refer to the full API reference:</p> <ul> <li>Extended API</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"API/#autohotkey-v2-extended-api-threads-websockets","title":"AutoHotkey v2 \u2013 Extended API (Threads + WebSockets)","text":"<p>This document describes the additional built-in functions available in your custom AutoHotkey v2 build. These differ from stock AHK v2 and are callable directly from scripts.</p> <ul> <li>Status: experimental</li> <li>Platform: Windows (x64)</li> <li>Networking: ws:// (non\u2011TLS)</li> </ul>"},{"location":"API/#quick-start","title":"Quick Start","text":"<pre><code>; Create a worker thread that updates a shared var 3 times\ntid := ThreadCreate(\"\n(\ni := 0\nwhile (i &lt; 3)\n{\n    ThreadSetVar('worker_msg', 'tick ' . i)\n    Sleep(500)\n    i := i + 1\n}\n)\")\n\nMsgBox(\"Started thread \" . tid)\nMsgBox(\"Active threads: \" . ThreadCount())\n\n; Read the shared var set by the worker\nSleep(1600)\nMsgBox(\"worker_msg =&gt; \" . ThreadGetVar(\"worker_msg\"))\n\n; Stop the worker\nok := ThreadDestroy(tid)\nMsgBox(\"Stopped: \" . ok)\n</code></pre>"},{"location":"API/#multithreading-api","title":"Multithreading API","text":""},{"location":"API/#threadcreatescripttext-integer-threadid","title":"ThreadCreate(scriptText) \u2192 Integer threadId","text":"<p>Runs <code>scriptText</code> in a new OS thread with an isolated (experimental) interpreter.</p> <ul> <li>Parameters</li> <li><code>scriptText</code> (String): AutoHotkey v2 code to execute in the worker thread.</li> <li>Returns</li> <li><code>threadId</code> (Integer): A positive identifier for the new thread.</li> <li>Notes</li> <li>Cooperative shutdown: the thread checks an internal stop flag periodically.</li> <li>Unsupported functions inside threads cause the thread to set <code>thread_&lt;id&gt;_error</code> via <code>ThreadSetVar</code> and stop.</li> <li>Currently supported inside workers (incremental): basic <code>while/if/else/end</code>, <code>Sleep</code>, simple expressions, <code>ThreadSetVar/ThreadGetVar</code>, <code>WebSocket*</code>.</li> </ul> <p>Example:</p> <pre><code>tid := ThreadCreate(\"\n(\ncount := 0\nwhile (count &lt; 5) {\n    ThreadSetVar('last_tick', count)\n    Sleep(200)\n    count := count + 1\n}\n)\")\n</code></pre>"},{"location":"API/#threaddestroythreadid-boolean-success","title":"ThreadDestroy(threadId) \u2192 Boolean success","text":"<p>Requests the worker to stop and joins the OS thread.</p> <ul> <li>Parameters</li> <li><code>threadId</code> (Integer): A value previously returned by <code>ThreadCreate</code>.</li> <li>Returns</li> <li><code>true</code> if the thread was found and shut down, otherwise <code>false</code>.</li> </ul>"},{"location":"API/#threadcount-integer","title":"ThreadCount() \u2192 Integer","text":"<p>Returns the number of currently active worker threads.</p>"},{"location":"API/#threadsetvarname-value-boolean-success","title":"ThreadSetVar(name, value) \u2192 Boolean success","text":"<p>Sets a process\u2011wide shared variable in a thread\u2011safe store.</p> <ul> <li>Parameters</li> <li><code>name</code> (String): Variable key.</li> <li><code>value</code> (String/Number): Value to store (stored as string internally).</li> <li>Returns</li> <li><code>true</code> on success.</li> <li>Notes</li> <li>Accessible from both main script and worker threads.</li> </ul>"},{"location":"API/#threadgetvarname-string-valueorempty","title":"ThreadGetVar(name) \u2192 String valueOrEmpty","text":"<p>Gets a value previously set via <code>ThreadSetVar</code>.</p> <ul> <li>Parameters</li> <li><code>name</code> (String): Variable key.</li> <li>Returns</li> <li>Stored string value, or empty string if missing.</li> </ul>"},{"location":"API/#websocket-client-api","title":"WebSocket Client API","text":"<p>Single global client instance (per process) using WinSock. Supports <code>ws://host:port</code> only.</p>"},{"location":"API/#websocketconnecturl-boolean-success","title":"WebSocketConnect(url) \u2192 Boolean success","text":"<p>Opens a WebSocket connection.</p> <ul> <li>Parameters</li> <li><code>url</code> (String): e.g. <code>\"ws://127.0.0.1:8080\"</code>.</li> <li>Returns</li> <li><code>true</code> on successful handshake, else <code>false</code>.</li> <li>Notes</li> <li>Frames sent are correctly client\u2011masked per RFC6455.</li> <li><code>wss://</code> (TLS) is not supported in this build.</li> </ul>"},{"location":"API/#websocketsendtext-boolean-success","title":"WebSocketSend(text) \u2192 Boolean success","text":"<p>Sends a text message.</p> <ul> <li>Parameters</li> <li><code>text</code> (String): Message payload.</li> <li>Returns</li> <li><code>true</code> on success.</li> </ul>"},{"location":"API/#websocketreceive-string-textorempty","title":"WebSocketReceive() \u2192 String textOrEmpty","text":"<p>Retrieves the next queued message.</p> <ul> <li>Returns</li> <li>Next message as a string, or empty string if none available.</li> </ul>"},{"location":"API/#websocketdisconnect-boolean-success","title":"WebSocketDisconnect() \u2192 Boolean success","text":"<p>Closes the current WebSocket connection.</p>"},{"location":"API/#http-utility","title":"HTTP Utility","text":""},{"location":"API/#httprequesturl-string-responsebody","title":"HttpRequest(url) \u2192 String responseBody","text":"<p>Simple HTTP GET helper.</p> <ul> <li>Parameters</li> <li><code>url</code> (String): The GET endpoint.</li> <li>Returns</li> <li>Response body as string (empty on failure).</li> </ul>"},{"location":"API/#behavior-errors-and-limitations","title":"Behavior, Errors, and Limitations","text":"<ul> <li>Interpreter in workers is incremental: not all AHK features are supported.</li> <li>Unsupported calls inside workers:</li> <li>The thread stops and sets a shared error variable named <code>thread_&lt;id&gt;_error</code> with a brief reason.</li> <li>Shutdown is cooperative: long blocking operations in worker code can delay stop.</li> <li>WebSockets: one global connection; suitable for simple client use and demos.</li> <li>Networking: <code>ws://</code> only (no TLS). Use a local proxy/tunnel if TLS is needed.</li> </ul>"},{"location":"API/#examples","title":"Examples","text":""},{"location":"API/#1-basic-thread-lifecycle","title":"1) Basic thread lifecycle","text":"<pre><code>tid := ThreadCreate(\"\n(\ni := 0\nwhile (i &lt; 3) {\n    ThreadSetVar('worker_msg', 'tick ' . i)\n    Sleep(250)\n    i := i + 1\n}\n)\")\n\nSleep(900)\nMsgBox(\"From worker: \" . ThreadGetVar('worker_msg'))\nThreadDestroy(tid)\n</code></pre>"},{"location":"API/#2-websocket-echo","title":"2) WebSocket echo","text":"<pre><code>if WebSocketConnect(\"ws://127.0.0.1:8080\") {\n    WebSocketSend(\"hello\")\n    Sleep(100)\n    msg := WebSocketReceive()\n    if (msg != \"\")\n        MsgBox(\"Got: \" . msg)\n    WebSocketDisconnect()\n}\n</code></pre>"},{"location":"API/#3-websockets-from-a-worker-thread","title":"3) WebSockets from a worker thread","text":"<pre><code>tid := ThreadCreate(\"\n(\nif WebSocketConnect('ws://127.0.0.1:8080') {\n    WebSocketSend('hi from worker')\n    Sleep(100)\n    r := WebSocketReceive()\n    ThreadSetVar('ws_reply', r)\n    WebSocketDisconnect()\n} else {\n    ThreadSetVar('thread_' . A_ThreadId . '_error', 'ws connect failed')\n}\n)\")\n\nSleep(300)\nMsgBox(\"Reply: \" . ThreadGetVar('ws_reply'))\nThreadDestroy(tid)\n</code></pre>"},{"location":"API/#versioning","title":"Versioning","text":"<ul> <li>Functions and behavior may change as the per\u2011thread interpreter matures.</li> <li>Keep scripts resilient to missing features by guarding with simple checks.</li> </ul>"},{"location":"API/#changelog-high-level","title":"Changelog (high level)","text":"<ul> <li>Added: ThreadCreate, ThreadDestroy, ThreadCount</li> <li>Added: ThreadSetVar, ThreadGetVar (shared, thread\u2011safe)</li> <li>Added: WebSocketConnect/Send/Receive/Disconnect (ws:// only)</li> <li>Added: HttpRequest (GET)</li> </ul>"}]}